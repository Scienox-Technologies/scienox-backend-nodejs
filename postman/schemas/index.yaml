openapi: "3.0.0"
info:
    version: "1.0.0"
    title: "Sample API"
    description: Buy or rent spacecrafts
# eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjQyMjEyZWNlNGIyZGY1MTAxNzgzZjgxIiwiZW1haWwiOiJpbnN0cnVjdG9yMUBtYWlsLmNvbSIsInVzZXJfdHlwZSI6Imluc3RydWN0b3IiLCJpYXQiOjE2Nzk5NTQ2NjgsImV4cCI6MTc2NjM1NDY2OH0.69guaeY7LBntRhV9so9SuJJlB7Po38wh1BIQtKo-Rl8
paths:
    /auth/register:
        post:
            summary: Register new student or instructor (not admin)
            responses:
                201:
                    description: User registration successful
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/TokenAndUserData"
                400:
                    description: Invalid data provided or incomplete data provided or user already exists
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorMsg"
    /auth/login:
        post:
            summary: Login all user types (student, instructor or admin)
            responses:
                200:
                    description: User login successful
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/TokenAndUserData"
                400:
                    description: Invalid credentials provided or incomplete data provided
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorMsg"
                404:
                    description: User does not exists with given email
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorMsg"

    /users:
        get:
            summary: Create new student or instructor or admin
            responses:
                201:
                    description: User creation successful
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserData"
                400:
                    description: Invalid data provided or incomplete data provided or user already exists
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorMsg"


                                
        post:
            summary: Create new student or instructor or admin
            responses:
                201:
                    description: User creation successful
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserData"
                400:
                    description: Invalid data provided or incomplete data provided or user already exists
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorMsg"


    # /spacecrafts/{spacecraftId}:
    #   parameters:
    #     - name: spacecraftId
    #       description: The unique identifier of the spacecraft
    #       in: path
    #       required: true
    #       schema:
    #         $ref: '#/components/schemas/SpacecraftId'
    #   get:
    #     summary: Read a spacecraft
    #     responses:
    #       '200':
    #         description: The spacecraft corresponding to the provided `spacecraftId`
    #         content:
    #           application/json:
    #             schema:
    #               $ref: '#/components/schemas/Spacecraft'
    #       404:
    #         description: No spacecraft found for the provided `spacecraftId`
    #         content:
    #           application/json:
    #             schema:
    #               $ref: '#/components/schemas/Error'
    #       500:
    #         description: Unexpected error
    #         content:
    #           application/json:
    #             schema:
    #               $ref: '#/components/schemas/Error'

components:
    schemas:
        UserData:
            type: object
            required:
                - first_name
                - last_name
                - email
                - user_type
            properties:
                first_name:
                    description: description
                    type: string
                last_name:
                    description: description
                    type: string
                email:
                    description: description
                    type: string
                user_type:
                    description: description
                    type: string
        TokenAndUserData:
            type: object
            required:
                - user
                - token
            properties:
                user:
                    description: User data payload
                    type: object
                token:
                    description: Temporary access token
                    type: string
        ErrorMsg:
            type: object
            required:
                - MSG
                - ERR
            properties:
                MSG:
                    description: Human readable error message
                    type: string
                ERR:
                    description: Predefined error code
                    type: string
        # SpacecraftId:
        #   description: The unique identifier of a spacecraft
        #   type: string
        # Spacecraft:
        #   type: object
        #   required:
        #     - id
        #     - name
        #     - type
        #   properties:
        #     id:
        #       $ref: '#/components/schemas/SpacecraftId'
        #     name:
        #       type: string
        #     type:
        #       type: string
        #       enum:
        #         - capsule
        #         - probe
        #         - satellite
        #         - spaceplane
        #         - station
        #     description:
        #       type: string
    securitySchemes:
        ApiKey:
            type: apiKey
            in: header
            name: X-Api-Key
security:
    - ApiKey: []
